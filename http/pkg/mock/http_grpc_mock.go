// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/server/pb/http_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/izveigor/p2p-words/http/pkg/server/pb"
	grpc "google.golang.org/grpc"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockHTTPClient) CreateBook(ctx context.Context, in *pb.CreateBookRequest, opts ...grpc.CallOption) (*pb.CreateBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBook", varargs...)
	ret0, _ := ret[0].(*pb.CreateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockHTTPClientMockRecorder) CreateBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockHTTPClient)(nil).CreateBook), varargs...)
}

// GetBooksInformation mocks base method.
func (m *MockHTTPClient) GetBooksInformation(ctx context.Context, in *pb.GetBooksInformationRequest, opts ...grpc.CallOption) (*pb.GetBooksInformationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBooksInformation", varargs...)
	ret0, _ := ret[0].(*pb.GetBooksInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksInformation indicates an expected call of GetBooksInformation.
func (mr *MockHTTPClientMockRecorder) GetBooksInformation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksInformation", reflect.TypeOf((*MockHTTPClient)(nil).GetBooksInformation), varargs...)
}

// SearchSentences mocks base method.
func (m *MockHTTPClient) SearchSentences(ctx context.Context, in *pb.SearchSentencesRequest, opts ...grpc.CallOption) (*pb.SearchSentencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSentences", varargs...)
	ret0, _ := ret[0].(*pb.SearchSentencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSentences indicates an expected call of SearchSentences.
func (mr *MockHTTPClientMockRecorder) SearchSentences(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSentences", reflect.TypeOf((*MockHTTPClient)(nil).SearchSentences), varargs...)
}

// MockHTTPServer is a mock of HTTPServer interface.
type MockHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerMockRecorder
}

// MockHTTPServerMockRecorder is the mock recorder for MockHTTPServer.
type MockHTTPServerMockRecorder struct {
	mock *MockHTTPServer
}

// NewMockHTTPServer creates a new mock instance.
func NewMockHTTPServer(ctrl *gomock.Controller) *MockHTTPServer {
	mock := &MockHTTPServer{ctrl: ctrl}
	mock.recorder = &MockHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServer) EXPECT() *MockHTTPServerMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockHTTPServer) CreateBook(arg0 context.Context, arg1 *pb.CreateBookRequest) (*pb.CreateBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockHTTPServerMockRecorder) CreateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockHTTPServer)(nil).CreateBook), arg0, arg1)
}

// GetBooksInformation mocks base method.
func (m *MockHTTPServer) GetBooksInformation(arg0 context.Context, arg1 *pb.GetBooksInformationRequest) (*pb.GetBooksInformationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksInformation", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBooksInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksInformation indicates an expected call of GetBooksInformation.
func (mr *MockHTTPServerMockRecorder) GetBooksInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksInformation", reflect.TypeOf((*MockHTTPServer)(nil).GetBooksInformation), arg0, arg1)
}

// SearchSentences mocks base method.
func (m *MockHTTPServer) SearchSentences(arg0 context.Context, arg1 *pb.SearchSentencesRequest) (*pb.SearchSentencesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSentences", arg0, arg1)
	ret0, _ := ret[0].(*pb.SearchSentencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSentences indicates an expected call of SearchSentences.
func (mr *MockHTTPServerMockRecorder) SearchSentences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSentences", reflect.TypeOf((*MockHTTPServer)(nil).SearchSentences), arg0, arg1)
}

// mustEmbedUnimplementedHTTPServer mocks base method.
func (m *MockHTTPServer) mustEmbedUnimplementedHTTPServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHTTPServer")
}

// mustEmbedUnimplementedHTTPServer indicates an expected call of mustEmbedUnimplementedHTTPServer.
func (mr *MockHTTPServerMockRecorder) mustEmbedUnimplementedHTTPServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHTTPServer", reflect.TypeOf((*MockHTTPServer)(nil).mustEmbedUnimplementedHTTPServer))
}

// MockUnsafeHTTPServer is a mock of UnsafeHTTPServer interface.
type MockUnsafeHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHTTPServerMockRecorder
}

// MockUnsafeHTTPServerMockRecorder is the mock recorder for MockUnsafeHTTPServer.
type MockUnsafeHTTPServerMockRecorder struct {
	mock *MockUnsafeHTTPServer
}

// NewMockUnsafeHTTPServer creates a new mock instance.
func NewMockUnsafeHTTPServer(ctrl *gomock.Controller) *MockUnsafeHTTPServer {
	mock := &MockUnsafeHTTPServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHTTPServer) EXPECT() *MockUnsafeHTTPServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHTTPServer mocks base method.
func (m *MockUnsafeHTTPServer) mustEmbedUnimplementedHTTPServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHTTPServer")
}

// mustEmbedUnimplementedHTTPServer indicates an expected call of mustEmbedUnimplementedHTTPServer.
func (mr *MockUnsafeHTTPServerMockRecorder) mustEmbedUnimplementedHTTPServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHTTPServer", reflect.TypeOf((*MockUnsafeHTTPServer)(nil).mustEmbedUnimplementedHTTPServer))
}
