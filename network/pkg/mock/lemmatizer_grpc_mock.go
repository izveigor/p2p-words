// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/p2p/pb/lemmatizer_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/izveigor/p2p-words/network/pkg/p2p/pb"
	grpc "google.golang.org/grpc"
)

// MockLemmatizersClient is a mock of LemmatizersClient interface.
type MockLemmatizersClient struct {
	ctrl     *gomock.Controller
	recorder *MockLemmatizersClientMockRecorder
}

// MockLemmatizersClientMockRecorder is the mock recorder for MockLemmatizersClient.
type MockLemmatizersClientMockRecorder struct {
	mock *MockLemmatizersClient
}

// NewMockLemmatizersClient creates a new mock instance.
func NewMockLemmatizersClient(ctrl *gomock.Controller) *MockLemmatizersClient {
	mock := &MockLemmatizersClient{ctrl: ctrl}
	mock.recorder = &MockLemmatizersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLemmatizersClient) EXPECT() *MockLemmatizersClientMockRecorder {
	return m.recorder
}

// Lemmatize mocks base method.
func (m *MockLemmatizersClient) Lemmatize(ctx context.Context, in *pb.LemmatizerRequest, opts ...grpc.CallOption) (*pb.LemmatizerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lemmatize", varargs...)
	ret0, _ := ret[0].(*pb.LemmatizerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lemmatize indicates an expected call of Lemmatize.
func (mr *MockLemmatizersClientMockRecorder) Lemmatize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lemmatize", reflect.TypeOf((*MockLemmatizersClient)(nil).Lemmatize), varargs...)
}

// MockLemmatizersServer is a mock of LemmatizersServer interface.
type MockLemmatizersServer struct {
	ctrl     *gomock.Controller
	recorder *MockLemmatizersServerMockRecorder
}

// MockLemmatizersServerMockRecorder is the mock recorder for MockLemmatizersServer.
type MockLemmatizersServerMockRecorder struct {
	mock *MockLemmatizersServer
}

// NewMockLemmatizersServer creates a new mock instance.
func NewMockLemmatizersServer(ctrl *gomock.Controller) *MockLemmatizersServer {
	mock := &MockLemmatizersServer{ctrl: ctrl}
	mock.recorder = &MockLemmatizersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLemmatizersServer) EXPECT() *MockLemmatizersServerMockRecorder {
	return m.recorder
}

// Lemmatize mocks base method.
func (m *MockLemmatizersServer) Lemmatize(arg0 context.Context, arg1 *pb.LemmatizerRequest) (*pb.LemmatizerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lemmatize", arg0, arg1)
	ret0, _ := ret[0].(*pb.LemmatizerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lemmatize indicates an expected call of Lemmatize.
func (mr *MockLemmatizersServerMockRecorder) Lemmatize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lemmatize", reflect.TypeOf((*MockLemmatizersServer)(nil).Lemmatize), arg0, arg1)
}

// mustEmbedUnimplementedLemmatizersServer mocks base method.
func (m *MockLemmatizersServer) mustEmbedUnimplementedLemmatizersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLemmatizersServer")
}

// mustEmbedUnimplementedLemmatizersServer indicates an expected call of mustEmbedUnimplementedLemmatizersServer.
func (mr *MockLemmatizersServerMockRecorder) mustEmbedUnimplementedLemmatizersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLemmatizersServer", reflect.TypeOf((*MockLemmatizersServer)(nil).mustEmbedUnimplementedLemmatizersServer))
}

// MockUnsafeLemmatizersServer is a mock of UnsafeLemmatizersServer interface.
type MockUnsafeLemmatizersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLemmatizersServerMockRecorder
}

// MockUnsafeLemmatizersServerMockRecorder is the mock recorder for MockUnsafeLemmatizersServer.
type MockUnsafeLemmatizersServerMockRecorder struct {
	mock *MockUnsafeLemmatizersServer
}

// NewMockUnsafeLemmatizersServer creates a new mock instance.
func NewMockUnsafeLemmatizersServer(ctrl *gomock.Controller) *MockUnsafeLemmatizersServer {
	mock := &MockUnsafeLemmatizersServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLemmatizersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLemmatizersServer) EXPECT() *MockUnsafeLemmatizersServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLemmatizersServer mocks base method.
func (m *MockUnsafeLemmatizersServer) mustEmbedUnimplementedLemmatizersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLemmatizersServer")
}

// mustEmbedUnimplementedLemmatizersServer indicates an expected call of mustEmbedUnimplementedLemmatizersServer.
func (mr *MockUnsafeLemmatizersServerMockRecorder) mustEmbedUnimplementedLemmatizersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLemmatizersServer", reflect.TypeOf((*MockUnsafeLemmatizersServer)(nil).mustEmbedUnimplementedLemmatizersServer))
}
