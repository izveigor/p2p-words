// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: http.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPClient is the client API for HTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPClient interface {
	SearchSentences(ctx context.Context, in *SearchSentencesRequest, opts ...grpc.CallOption) (*SearchSentencesResponse, error)
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	GetBooksInformation(ctx context.Context, in *GetBooksInformationRequest, opts ...grpc.CallOption) (*GetBooksInformationResponse, error)
}

type hTTPClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPClient(cc grpc.ClientConnInterface) HTTPClient {
	return &hTTPClient{cc}
}

func (c *hTTPClient) SearchSentences(ctx context.Context, in *SearchSentencesRequest, opts ...grpc.CallOption) (*SearchSentencesResponse, error) {
	out := new(SearchSentencesResponse)
	err := c.cc.Invoke(ctx, "/p2p.HTTP/SearchSentences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, "/p2p.HTTP/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPClient) GetBooksInformation(ctx context.Context, in *GetBooksInformationRequest, opts ...grpc.CallOption) (*GetBooksInformationResponse, error) {
	out := new(GetBooksInformationResponse)
	err := c.cc.Invoke(ctx, "/p2p.HTTP/GetBooksInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServer is the server API for HTTP service.
// All implementations must embed UnimplementedHTTPServer
// for forward compatibility
type HTTPServer interface {
	SearchSentences(context.Context, *SearchSentencesRequest) (*SearchSentencesResponse, error)
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	GetBooksInformation(context.Context, *GetBooksInformationRequest) (*GetBooksInformationResponse, error)
	mustEmbedUnimplementedHTTPServer()
}

// UnimplementedHTTPServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPServer struct {
}

func (UnimplementedHTTPServer) SearchSentences(context.Context, *SearchSentencesRequest) (*SearchSentencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSentences not implemented")
}
func (UnimplementedHTTPServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedHTTPServer) GetBooksInformation(context.Context, *GetBooksInformationRequest) (*GetBooksInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksInformation not implemented")
}
func (UnimplementedHTTPServer) mustEmbedUnimplementedHTTPServer() {}

// UnsafeHTTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPServer will
// result in compilation errors.
type UnsafeHTTPServer interface {
	mustEmbedUnimplementedHTTPServer()
}

func RegisterHTTPServer(s grpc.ServiceRegistrar, srv HTTPServer) {
	s.RegisterService(&HTTP_ServiceDesc, srv)
}

func _HTTP_SearchSentences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSentencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).SearchSentences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.HTTP/SearchSentences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).SearchSentences(ctx, req.(*SearchSentencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTP_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.HTTP/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTP_GetBooksInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).GetBooksInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.HTTP/GetBooksInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).GetBooksInformation(ctx, req.(*GetBooksInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTP_ServiceDesc is the grpc.ServiceDesc for HTTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.HTTP",
	HandlerType: (*HTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSentences",
			Handler:    _HTTP_SearchSentences_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _HTTP_CreateBook_Handler,
		},
		{
			MethodName: "GetBooksInformation",
			Handler:    _HTTP_GetBooksInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http.proto",
}
